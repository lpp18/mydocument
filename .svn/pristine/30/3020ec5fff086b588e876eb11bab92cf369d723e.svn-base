//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace WorkflowApp.SvcWorkflowMWF {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Return_Model", Namespace="http://schemas.datacontract.org/2004/07/Mis.WcfLib.WorkFlow.WF.DAL")]
    [System.SerializableAttribute()]
    public partial class Return_Model : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string reference1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string retCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string retMessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string reference1 {
            get {
                return this.reference1Field;
            }
            set {
                if ((object.ReferenceEquals(this.reference1Field, value) != true)) {
                    this.reference1Field = value;
                    this.RaisePropertyChanged("reference1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string retCode {
            get {
                return this.retCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.retCodeField, value) != true)) {
                    this.retCodeField = value;
                    this.RaisePropertyChanged("retCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string retMessage {
            get {
                return this.retMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.retMessageField, value) != true)) {
                    this.retMessageField = value;
                    this.RaisePropertyChanged("retMessage");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SerializationRepeaingTable", Namespace="http://schemas.datacontract.org/2004/07/Mis.Common.Model")]
    [System.SerializableAttribute()]
    public partial class SerializationRepeaingTable : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string KeyWordField;
        
        private string ModelIDField;
        
        private string ProcessIDField;
        
        private string ServerIDField;
        
        private string XMLDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string KeyWord {
            get {
                return this.KeyWordField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyWordField, value) != true)) {
                    this.KeyWordField = value;
                    this.RaisePropertyChanged("KeyWord");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ModelID {
            get {
                return this.ModelIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelIDField, value) != true)) {
                    this.ModelIDField = value;
                    this.RaisePropertyChanged("ModelID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ProcessID {
            get {
                return this.ProcessIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessIDField, value) != true)) {
                    this.ProcessIDField = value;
                    this.RaisePropertyChanged("ProcessID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ServerID {
            get {
                return this.ServerIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerIDField, value) != true)) {
                    this.ServerIDField = value;
                    this.RaisePropertyChanged("ServerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string XMLData {
            get {
                return this.XMLDataField;
            }
            set {
                if ((object.ReferenceEquals(this.XMLDataField, value) != true)) {
                    this.XMLDataField = value;
                    this.RaisePropertyChanged("XMLData");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SvcWorkflowMWF.ISvcWorkflowMWF")]
    public interface ISvcWorkflowMWF {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/test", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/testResponse")]
        string test();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/test", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/testResponse")]
        System.Threading.Tasks.Task<string> testAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/Submit", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/SubmitResponse")]
        string Submit(string ServerID, string Project, string ModelID, string ProcessID, string TaskID, string isTesting, string strUserLoginName, string strApproveValue, string strApproveNote, string f_hqbz, string f_zbrID, string f_hqrID, string f_hqrxx);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/Submit", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/SubmitResponse")]
        System.Threading.Tasks.Task<string> SubmitAsync(string ServerID, string Project, string ModelID, string ProcessID, string TaskID, string isTesting, string strUserLoginName, string strApproveValue, string strApproveNote, string f_hqbz, string f_zbrID, string f_hqrID, string f_hqrxx);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/SubmitWithValue", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/SubmitWithValueResponse")]
        string SubmitWithValue(string ServerID, string Project, string ModelID, string ProcessID, string TaskID, string isTesting, string strUserLoginName, string strApproveValue, string strApproveNote, string f_hqbz, string f_zbrID, string f_hqrID, string f_hqxx, string Value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/SubmitWithValue", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/SubmitWithValueResponse")]
        System.Threading.Tasks.Task<string> SubmitWithValueAsync(string ServerID, string Project, string ModelID, string ProcessID, string TaskID, string isTesting, string strUserLoginName, string strApproveValue, string strApproveNote, string f_hqbz, string f_zbrID, string f_hqrID, string f_hqxx, string Value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/SubmitWithJSon", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/SubmitWithJSonResponse")]
        string SubmitWithJSon(
                    string ServerID, 
                    string Project, 
                    string ModelID, 
                    string ProcessID, 
                    string TaskID, 
                    string isTesting, 
                    string strUserLoginName, 
                    string strApproveValue, 
                    string strApproveNote, 
                    string f_hqbz, 
                    string f_zbrID, 
                    string f_hqrID, 
                    string f_hqxx, 
                    string f_hqlx, 
                    string FieldValue, 
                    string strApproveJSon);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/SubmitWithJSon", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/SubmitWithJSonResponse")]
        System.Threading.Tasks.Task<string> SubmitWithJSonAsync(
                    string ServerID, 
                    string Project, 
                    string ModelID, 
                    string ProcessID, 
                    string TaskID, 
                    string isTesting, 
                    string strUserLoginName, 
                    string strApproveValue, 
                    string strApproveNote, 
                    string f_hqbz, 
                    string f_zbrID, 
                    string f_hqrID, 
                    string f_hqxx, 
                    string f_hqlx, 
                    string FieldValue, 
                    string strApproveJSon);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/NewBillSubmitByXML", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/NewBillSubmitByXMLResponse")]
        string NewBillSubmitByXML(string ServerID, string ModelID, string UserLoginName, string strXmlDoc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/NewBillSubmitByXML", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/NewBillSubmitByXMLResponse")]
        System.Threading.Tasks.Task<string> NewBillSubmitByXMLAsync(string ServerID, string ModelID, string UserLoginName, string strXmlDoc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/NewBillSubmitByXML_RepeaingTable", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/NewBillSubmitByXML_RepeaingTableResponse")]
        string NewBillSubmitByXML_RepeaingTable(string ServerID, string ModelID, string KeyWord, string strXmlDoc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/NewBillSubmitByXML_RepeaingTable", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/NewBillSubmitByXML_RepeaingTableResponse")]
        System.Threading.Tasks.Task<string> NewBillSubmitByXML_RepeaingTableAsync(string ServerID, string ModelID, string KeyWord, string strXmlDoc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/P_GetMobileDetailByLoinName", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/P_GetMobileDetailByLoinNameResponse")]
        string P_GetMobileDetailByLoinName(string ServerID, string loginname, string year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/P_GetMobileDetailByLoinName", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/P_GetMobileDetailByLoinNameResponse")]
        System.Threading.Tasks.Task<string> P_GetMobileDetailByLoinNameAsync(string ServerID, string loginname, string year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/exWebServiceSaveBill2DB", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/exWebServiceSaveBill2DBResponse")]
        string exWebServiceSaveBill2DB(string ServerID, string jsonStrBill);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/exWebServiceSaveBill2DB", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/exWebServiceSaveBill2DBResponse")]
        System.Threading.Tasks.Task<string> exWebServiceSaveBill2DBAsync(string ServerID, string jsonStrBill);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/SubmitOnLine", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/SubmitOnLineResponse")]
        WorkflowApp.SvcWorkflowMWF.Return_Model SubmitOnLine(string ServerID, string Project, string ModelID, string jsonStr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/SubmitOnLine", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/SubmitOnLineResponse")]
        System.Threading.Tasks.Task<WorkflowApp.SvcWorkflowMWF.Return_Model> SubmitOnLineAsync(string ServerID, string Project, string ModelID, string jsonStr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/SubmitOnLine_Check", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/SubmitOnLine_CheckResponse")]
        WorkflowApp.SvcWorkflowMWF.Return_Model SubmitOnLine_Check(string ServerID, string Project, string ModelID, string jsonStr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/SubmitOnLine_Check", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/SubmitOnLine_CheckResponse")]
        System.Threading.Tasks.Task<WorkflowApp.SvcWorkflowMWF.Return_Model> SubmitOnLine_CheckAsync(string ServerID, string Project, string ModelID, string jsonStr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/GetCfgRepeaingTable", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/GetCfgRepeaingTableResponse")]
        string GetCfgRepeaingTable(string ServerID, string Project, string ModelID, string Keyword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/GetCfgRepeaingTable", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/GetCfgRepeaingTableResponse")]
        System.Threading.Tasks.Task<string> GetCfgRepeaingTableAsync(string ServerID, string Project, string ModelID, string Keyword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/SubmitRepeaingTable", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/SubmitRepeaingTableResponse")]
        string SubmitRepeaingTable(string ServerID, string Project, WorkflowApp.SvcWorkflowMWF.SerializationRepeaingTable SerializeRepeaingTable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/SubmitRepeaingTable", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/SubmitRepeaingTableResponse")]
        System.Threading.Tasks.Task<string> SubmitRepeaingTableAsync(string ServerID, string Project, WorkflowApp.SvcWorkflowMWF.SerializationRepeaingTable SerializeRepeaingTable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/GWYY", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/GWYYResponse")]
        bool GWYY(string ServerID, string Project, string ModelID, string ProcessID, string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/GWYY", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/GWYYResponse")]
        System.Threading.Tasks.Task<bool> GWYYAsync(string ServerID, string Project, string ModelID, string ProcessID, string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/Bbs_Get_MenuSmall", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/Bbs_Get_MenuSmallResponse")]
        System.Data.DataSet Bbs_Get_MenuSmall(string ServerID, string Project, string MenuSmall_BigId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/Bbs_Get_MenuSmall", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/Bbs_Get_MenuSmallResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> Bbs_Get_MenuSmallAsync(string ServerID, string Project, string MenuSmall_BigId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/Bbs_Get_Post", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/Bbs_Get_PostResponse")]
        System.Data.DataSet Bbs_Get_Post(string ServerID, string Project, string Post_SmallId, int PageSize, string PageCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/Bbs_Get_Post", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/Bbs_Get_PostResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> Bbs_Get_PostAsync(string ServerID, string Project, string Post_SmallId, int PageSize, string PageCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/Bbs_Get_PostBack", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/Bbs_Get_PostBackResponse")]
        System.Data.DataSet Bbs_Get_PostBack(string ServerID, string Project, string PostBack_PostId, string PageCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/Bbs_Get_PostBack", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/Bbs_Get_PostBackResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> Bbs_Get_PostBackAsync(string ServerID, string Project, string PostBack_PostId, string PageCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/Bbs_Insert_Post", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/Bbs_Insert_PostResponse")]
        bool Bbs_Insert_Post(string ServerID, string Project, string Post_Title, string Post_Content, string Post_Sender, string Post_SmallId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/Bbs_Insert_Post", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/Bbs_Insert_PostResponse")]
        System.Threading.Tasks.Task<bool> Bbs_Insert_PostAsync(string ServerID, string Project, string Post_Title, string Post_Content, string Post_Sender, string Post_SmallId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/Bbs_Insert_PostBack", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/Bbs_Insert_PostBackResponse")]
        bool Bbs_Insert_PostBack(string ServerID, string Project, string PostBack_Content, string PostBack_Sender, string PostBack_PostId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/Bbs_Insert_PostBack", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/Bbs_Insert_PostBackResponse")]
        System.Threading.Tasks.Task<bool> Bbs_Insert_PostBackAsync(string ServerID, string Project, string PostBack_Content, string PostBack_Sender, string PostBack_PostId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/Bbs_Update_Post", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/Bbs_Update_PostResponse")]
        bool Bbs_Update_Post(string ServerID, string Project, string Post_Title, string Post_Content, string Post_Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/Bbs_Update_Post", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/Bbs_Update_PostResponse")]
        System.Threading.Tasks.Task<bool> Bbs_Update_PostAsync(string ServerID, string Project, string Post_Title, string Post_Content, string Post_Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/Update_PostBack", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/Update_PostBackResponse")]
        bool Update_PostBack(string ServerID, string Project, string PostBack_Content, string PostBack_Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/Update_PostBack", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/Update_PostBackResponse")]
        System.Threading.Tasks.Task<bool> Update_PostBackAsync(string ServerID, string Project, string PostBack_Content, string PostBack_Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/Bbs_Get_Before_Post", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/Bbs_Get_Before_PostResponse")]
        System.Data.DataSet Bbs_Get_Before_Post(string ServerID, string Project, string Post_SmallId, string Post_Id, string PageCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/Bbs_Get_Before_Post", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/Bbs_Get_Before_PostResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> Bbs_Get_Before_PostAsync(string ServerID, string Project, string Post_SmallId, string Post_Id, string PageCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/Bbs_Get_After_Post", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/Bbs_Get_After_PostResponse")]
        System.Data.DataSet Bbs_Get_After_Post(string ServerID, string Project, string Post_SmallId, string Post_Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/Bbs_Get_After_Post", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/Bbs_Get_After_PostResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> Bbs_Get_After_PostAsync(string ServerID, string Project, string Post_SmallId, string Post_Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/Bbs_Get_PostBackCount", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/Bbs_Get_PostBackCountResponse")]
        string Bbs_Get_PostBackCount(string ServerID, string Project, string Post_Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/Bbs_Get_PostBackCount", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/Bbs_Get_PostBackCountResponse")]
        System.Threading.Tasks.Task<string> Bbs_Get_PostBackCountAsync(string ServerID, string Project, string Post_Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/Bbs_Get_PostInfo", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/Bbs_Get_PostInfoResponse")]
        System.Data.DataSet Bbs_Get_PostInfo(string ServerID, string Project, string Post_Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/Bbs_Get_PostInfo", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/Bbs_Get_PostInfoResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> Bbs_Get_PostInfoAsync(string ServerID, string Project, string Post_Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/Bbs_Get_AfterPostBack", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/Bbs_Get_AfterPostBackResponse")]
        System.Data.DataSet Bbs_Get_AfterPostBack(string ServerID, string Project, string PostBack_PostId, string PostBack_Id, string PageCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/Bbs_Get_AfterPostBack", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/Bbs_Get_AfterPostBackResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> Bbs_Get_AfterPostBackAsync(string ServerID, string Project, string PostBack_PostId, string PostBack_Id, string PageCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/Bbs_Get_User", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/Bbs_Get_UserResponse")]
        System.Data.DataSet Bbs_Get_User(string ServerID, string Project, string User_Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/Bbs_Get_User", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/Bbs_Get_UserResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> Bbs_Get_UserAsync(string ServerID, string Project, string User_Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/MsgSendSys", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/MsgSendSysResponse")]
        string MsgSendSys(string strMailTo, string strMailSubject, string strMailBody, string strEieNum, string strEieBody, string strSystemName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvcWorkflowMWF/MsgSendSys", ReplyAction="http://tempuri.org/ISvcWorkflowMWF/MsgSendSysResponse")]
        System.Threading.Tasks.Task<string> MsgSendSysAsync(string strMailTo, string strMailSubject, string strMailBody, string strEieNum, string strEieBody, string strSystemName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISvcWorkflowMWFChannel : WorkflowApp.SvcWorkflowMWF.ISvcWorkflowMWF, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SvcWorkflowMWFClient : System.ServiceModel.ClientBase<WorkflowApp.SvcWorkflowMWF.ISvcWorkflowMWF>, WorkflowApp.SvcWorkflowMWF.ISvcWorkflowMWF {
        
        public SvcWorkflowMWFClient() {
        }
        
        public SvcWorkflowMWFClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SvcWorkflowMWFClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SvcWorkflowMWFClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SvcWorkflowMWFClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string test() {
            return base.Channel.test();
        }
        
        public System.Threading.Tasks.Task<string> testAsync() {
            return base.Channel.testAsync();
        }
        
        public string Submit(string ServerID, string Project, string ModelID, string ProcessID, string TaskID, string isTesting, string strUserLoginName, string strApproveValue, string strApproveNote, string f_hqbz, string f_zbrID, string f_hqrID, string f_hqrxx) {
            return base.Channel.Submit(ServerID, Project, ModelID, ProcessID, TaskID, isTesting, strUserLoginName, strApproveValue, strApproveNote, f_hqbz, f_zbrID, f_hqrID, f_hqrxx);
        }
        
        public System.Threading.Tasks.Task<string> SubmitAsync(string ServerID, string Project, string ModelID, string ProcessID, string TaskID, string isTesting, string strUserLoginName, string strApproveValue, string strApproveNote, string f_hqbz, string f_zbrID, string f_hqrID, string f_hqrxx) {
            return base.Channel.SubmitAsync(ServerID, Project, ModelID, ProcessID, TaskID, isTesting, strUserLoginName, strApproveValue, strApproveNote, f_hqbz, f_zbrID, f_hqrID, f_hqrxx);
        }
        
        public string SubmitWithValue(string ServerID, string Project, string ModelID, string ProcessID, string TaskID, string isTesting, string strUserLoginName, string strApproveValue, string strApproveNote, string f_hqbz, string f_zbrID, string f_hqrID, string f_hqxx, string Value) {
            return base.Channel.SubmitWithValue(ServerID, Project, ModelID, ProcessID, TaskID, isTesting, strUserLoginName, strApproveValue, strApproveNote, f_hqbz, f_zbrID, f_hqrID, f_hqxx, Value);
        }
        
        public System.Threading.Tasks.Task<string> SubmitWithValueAsync(string ServerID, string Project, string ModelID, string ProcessID, string TaskID, string isTesting, string strUserLoginName, string strApproveValue, string strApproveNote, string f_hqbz, string f_zbrID, string f_hqrID, string f_hqxx, string Value) {
            return base.Channel.SubmitWithValueAsync(ServerID, Project, ModelID, ProcessID, TaskID, isTesting, strUserLoginName, strApproveValue, strApproveNote, f_hqbz, f_zbrID, f_hqrID, f_hqxx, Value);
        }
        
        public string SubmitWithJSon(
                    string ServerID, 
                    string Project, 
                    string ModelID, 
                    string ProcessID, 
                    string TaskID, 
                    string isTesting, 
                    string strUserLoginName, 
                    string strApproveValue, 
                    string strApproveNote, 
                    string f_hqbz, 
                    string f_zbrID, 
                    string f_hqrID, 
                    string f_hqxx, 
                    string f_hqlx, 
                    string FieldValue, 
                    string strApproveJSon) {
            return base.Channel.SubmitWithJSon(ServerID, Project, ModelID, ProcessID, TaskID, isTesting, strUserLoginName, strApproveValue, strApproveNote, f_hqbz, f_zbrID, f_hqrID, f_hqxx, f_hqlx, FieldValue, strApproveJSon);
        }
        
        public System.Threading.Tasks.Task<string> SubmitWithJSonAsync(
                    string ServerID, 
                    string Project, 
                    string ModelID, 
                    string ProcessID, 
                    string TaskID, 
                    string isTesting, 
                    string strUserLoginName, 
                    string strApproveValue, 
                    string strApproveNote, 
                    string f_hqbz, 
                    string f_zbrID, 
                    string f_hqrID, 
                    string f_hqxx, 
                    string f_hqlx, 
                    string FieldValue, 
                    string strApproveJSon) {
            return base.Channel.SubmitWithJSonAsync(ServerID, Project, ModelID, ProcessID, TaskID, isTesting, strUserLoginName, strApproveValue, strApproveNote, f_hqbz, f_zbrID, f_hqrID, f_hqxx, f_hqlx, FieldValue, strApproveJSon);
        }
        
        public string NewBillSubmitByXML(string ServerID, string ModelID, string UserLoginName, string strXmlDoc) {
            return base.Channel.NewBillSubmitByXML(ServerID, ModelID, UserLoginName, strXmlDoc);
        }
        
        public System.Threading.Tasks.Task<string> NewBillSubmitByXMLAsync(string ServerID, string ModelID, string UserLoginName, string strXmlDoc) {
            return base.Channel.NewBillSubmitByXMLAsync(ServerID, ModelID, UserLoginName, strXmlDoc);
        }
        
        public string NewBillSubmitByXML_RepeaingTable(string ServerID, string ModelID, string KeyWord, string strXmlDoc) {
            return base.Channel.NewBillSubmitByXML_RepeaingTable(ServerID, ModelID, KeyWord, strXmlDoc);
        }
        
        public System.Threading.Tasks.Task<string> NewBillSubmitByXML_RepeaingTableAsync(string ServerID, string ModelID, string KeyWord, string strXmlDoc) {
            return base.Channel.NewBillSubmitByXML_RepeaingTableAsync(ServerID, ModelID, KeyWord, strXmlDoc);
        }
        
        public string P_GetMobileDetailByLoinName(string ServerID, string loginname, string year) {
            return base.Channel.P_GetMobileDetailByLoinName(ServerID, loginname, year);
        }
        
        public System.Threading.Tasks.Task<string> P_GetMobileDetailByLoinNameAsync(string ServerID, string loginname, string year) {
            return base.Channel.P_GetMobileDetailByLoinNameAsync(ServerID, loginname, year);
        }
        
        public string exWebServiceSaveBill2DB(string ServerID, string jsonStrBill) {
            return base.Channel.exWebServiceSaveBill2DB(ServerID, jsonStrBill);
        }
        
        public System.Threading.Tasks.Task<string> exWebServiceSaveBill2DBAsync(string ServerID, string jsonStrBill) {
            return base.Channel.exWebServiceSaveBill2DBAsync(ServerID, jsonStrBill);
        }
        
        public WorkflowApp.SvcWorkflowMWF.Return_Model SubmitOnLine(string ServerID, string Project, string ModelID, string jsonStr) {
            return base.Channel.SubmitOnLine(ServerID, Project, ModelID, jsonStr);
        }
        
        public System.Threading.Tasks.Task<WorkflowApp.SvcWorkflowMWF.Return_Model> SubmitOnLineAsync(string ServerID, string Project, string ModelID, string jsonStr) {
            return base.Channel.SubmitOnLineAsync(ServerID, Project, ModelID, jsonStr);
        }
        
        public WorkflowApp.SvcWorkflowMWF.Return_Model SubmitOnLine_Check(string ServerID, string Project, string ModelID, string jsonStr) {
            return base.Channel.SubmitOnLine_Check(ServerID, Project, ModelID, jsonStr);
        }
        
        public System.Threading.Tasks.Task<WorkflowApp.SvcWorkflowMWF.Return_Model> SubmitOnLine_CheckAsync(string ServerID, string Project, string ModelID, string jsonStr) {
            return base.Channel.SubmitOnLine_CheckAsync(ServerID, Project, ModelID, jsonStr);
        }
        
        public string GetCfgRepeaingTable(string ServerID, string Project, string ModelID, string Keyword) {
            return base.Channel.GetCfgRepeaingTable(ServerID, Project, ModelID, Keyword);
        }
        
        public System.Threading.Tasks.Task<string> GetCfgRepeaingTableAsync(string ServerID, string Project, string ModelID, string Keyword) {
            return base.Channel.GetCfgRepeaingTableAsync(ServerID, Project, ModelID, Keyword);
        }
        
        public string SubmitRepeaingTable(string ServerID, string Project, WorkflowApp.SvcWorkflowMWF.SerializationRepeaingTable SerializeRepeaingTable) {
            return base.Channel.SubmitRepeaingTable(ServerID, Project, SerializeRepeaingTable);
        }
        
        public System.Threading.Tasks.Task<string> SubmitRepeaingTableAsync(string ServerID, string Project, WorkflowApp.SvcWorkflowMWF.SerializationRepeaingTable SerializeRepeaingTable) {
            return base.Channel.SubmitRepeaingTableAsync(ServerID, Project, SerializeRepeaingTable);
        }
        
        public bool GWYY(string ServerID, string Project, string ModelID, string ProcessID, string user) {
            return base.Channel.GWYY(ServerID, Project, ModelID, ProcessID, user);
        }
        
        public System.Threading.Tasks.Task<bool> GWYYAsync(string ServerID, string Project, string ModelID, string ProcessID, string user) {
            return base.Channel.GWYYAsync(ServerID, Project, ModelID, ProcessID, user);
        }
        
        public System.Data.DataSet Bbs_Get_MenuSmall(string ServerID, string Project, string MenuSmall_BigId) {
            return base.Channel.Bbs_Get_MenuSmall(ServerID, Project, MenuSmall_BigId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> Bbs_Get_MenuSmallAsync(string ServerID, string Project, string MenuSmall_BigId) {
            return base.Channel.Bbs_Get_MenuSmallAsync(ServerID, Project, MenuSmall_BigId);
        }
        
        public System.Data.DataSet Bbs_Get_Post(string ServerID, string Project, string Post_SmallId, int PageSize, string PageCount) {
            return base.Channel.Bbs_Get_Post(ServerID, Project, Post_SmallId, PageSize, PageCount);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> Bbs_Get_PostAsync(string ServerID, string Project, string Post_SmallId, int PageSize, string PageCount) {
            return base.Channel.Bbs_Get_PostAsync(ServerID, Project, Post_SmallId, PageSize, PageCount);
        }
        
        public System.Data.DataSet Bbs_Get_PostBack(string ServerID, string Project, string PostBack_PostId, string PageCount) {
            return base.Channel.Bbs_Get_PostBack(ServerID, Project, PostBack_PostId, PageCount);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> Bbs_Get_PostBackAsync(string ServerID, string Project, string PostBack_PostId, string PageCount) {
            return base.Channel.Bbs_Get_PostBackAsync(ServerID, Project, PostBack_PostId, PageCount);
        }
        
        public bool Bbs_Insert_Post(string ServerID, string Project, string Post_Title, string Post_Content, string Post_Sender, string Post_SmallId) {
            return base.Channel.Bbs_Insert_Post(ServerID, Project, Post_Title, Post_Content, Post_Sender, Post_SmallId);
        }
        
        public System.Threading.Tasks.Task<bool> Bbs_Insert_PostAsync(string ServerID, string Project, string Post_Title, string Post_Content, string Post_Sender, string Post_SmallId) {
            return base.Channel.Bbs_Insert_PostAsync(ServerID, Project, Post_Title, Post_Content, Post_Sender, Post_SmallId);
        }
        
        public bool Bbs_Insert_PostBack(string ServerID, string Project, string PostBack_Content, string PostBack_Sender, string PostBack_PostId) {
            return base.Channel.Bbs_Insert_PostBack(ServerID, Project, PostBack_Content, PostBack_Sender, PostBack_PostId);
        }
        
        public System.Threading.Tasks.Task<bool> Bbs_Insert_PostBackAsync(string ServerID, string Project, string PostBack_Content, string PostBack_Sender, string PostBack_PostId) {
            return base.Channel.Bbs_Insert_PostBackAsync(ServerID, Project, PostBack_Content, PostBack_Sender, PostBack_PostId);
        }
        
        public bool Bbs_Update_Post(string ServerID, string Project, string Post_Title, string Post_Content, string Post_Id) {
            return base.Channel.Bbs_Update_Post(ServerID, Project, Post_Title, Post_Content, Post_Id);
        }
        
        public System.Threading.Tasks.Task<bool> Bbs_Update_PostAsync(string ServerID, string Project, string Post_Title, string Post_Content, string Post_Id) {
            return base.Channel.Bbs_Update_PostAsync(ServerID, Project, Post_Title, Post_Content, Post_Id);
        }
        
        public bool Update_PostBack(string ServerID, string Project, string PostBack_Content, string PostBack_Id) {
            return base.Channel.Update_PostBack(ServerID, Project, PostBack_Content, PostBack_Id);
        }
        
        public System.Threading.Tasks.Task<bool> Update_PostBackAsync(string ServerID, string Project, string PostBack_Content, string PostBack_Id) {
            return base.Channel.Update_PostBackAsync(ServerID, Project, PostBack_Content, PostBack_Id);
        }
        
        public System.Data.DataSet Bbs_Get_Before_Post(string ServerID, string Project, string Post_SmallId, string Post_Id, string PageCount) {
            return base.Channel.Bbs_Get_Before_Post(ServerID, Project, Post_SmallId, Post_Id, PageCount);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> Bbs_Get_Before_PostAsync(string ServerID, string Project, string Post_SmallId, string Post_Id, string PageCount) {
            return base.Channel.Bbs_Get_Before_PostAsync(ServerID, Project, Post_SmallId, Post_Id, PageCount);
        }
        
        public System.Data.DataSet Bbs_Get_After_Post(string ServerID, string Project, string Post_SmallId, string Post_Id) {
            return base.Channel.Bbs_Get_After_Post(ServerID, Project, Post_SmallId, Post_Id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> Bbs_Get_After_PostAsync(string ServerID, string Project, string Post_SmallId, string Post_Id) {
            return base.Channel.Bbs_Get_After_PostAsync(ServerID, Project, Post_SmallId, Post_Id);
        }
        
        public string Bbs_Get_PostBackCount(string ServerID, string Project, string Post_Id) {
            return base.Channel.Bbs_Get_PostBackCount(ServerID, Project, Post_Id);
        }
        
        public System.Threading.Tasks.Task<string> Bbs_Get_PostBackCountAsync(string ServerID, string Project, string Post_Id) {
            return base.Channel.Bbs_Get_PostBackCountAsync(ServerID, Project, Post_Id);
        }
        
        public System.Data.DataSet Bbs_Get_PostInfo(string ServerID, string Project, string Post_Id) {
            return base.Channel.Bbs_Get_PostInfo(ServerID, Project, Post_Id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> Bbs_Get_PostInfoAsync(string ServerID, string Project, string Post_Id) {
            return base.Channel.Bbs_Get_PostInfoAsync(ServerID, Project, Post_Id);
        }
        
        public System.Data.DataSet Bbs_Get_AfterPostBack(string ServerID, string Project, string PostBack_PostId, string PostBack_Id, string PageCount) {
            return base.Channel.Bbs_Get_AfterPostBack(ServerID, Project, PostBack_PostId, PostBack_Id, PageCount);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> Bbs_Get_AfterPostBackAsync(string ServerID, string Project, string PostBack_PostId, string PostBack_Id, string PageCount) {
            return base.Channel.Bbs_Get_AfterPostBackAsync(ServerID, Project, PostBack_PostId, PostBack_Id, PageCount);
        }
        
        public System.Data.DataSet Bbs_Get_User(string ServerID, string Project, string User_Id) {
            return base.Channel.Bbs_Get_User(ServerID, Project, User_Id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> Bbs_Get_UserAsync(string ServerID, string Project, string User_Id) {
            return base.Channel.Bbs_Get_UserAsync(ServerID, Project, User_Id);
        }
        
        public string MsgSendSys(string strMailTo, string strMailSubject, string strMailBody, string strEieNum, string strEieBody, string strSystemName) {
            return base.Channel.MsgSendSys(strMailTo, strMailSubject, strMailBody, strEieNum, strEieBody, strSystemName);
        }
        
        public System.Threading.Tasks.Task<string> MsgSendSysAsync(string strMailTo, string strMailSubject, string strMailBody, string strEieNum, string strEieBody, string strSystemName) {
            return base.Channel.MsgSendSysAsync(strMailTo, strMailSubject, strMailBody, strEieNum, strEieBody, strSystemName);
        }
    }
}
